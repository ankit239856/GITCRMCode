// <copyright file="PostOperationaccountCreate.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/3/2020 2:46:04 PM</date>
// <summary>Implements the PostOperationaccountCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using CrmEarlyBound;



namespace CrmPackage.Plugin
{

    /// <summary>
    /// PostOperationaccountCreate Plugin.
    /// </summary>    
    public class PostOperationaccountCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationaccountCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationaccountCreate(string unsecure, string secure)
            : base(typeof(PostOperationaccountCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.
            try

            {
                var tracing = localContext.TracingService;

                tracing.Trace("Passed Service Context");
                var service = localContext.OrganizationService;
            var serviceContext = new CrmServiceContext(service);

                tracing.Trace("Passed Service Context");

              //  var accountService = new AccountService(service, tracing, localContext.PluginExecutionContext.PrimaryEntityId);
                tracing.Trace("Passed accountService");
                //  accountService.CreateTask(localContext.PluginExecutionContext.PrimaryEntityName);
                CreateTask(localContext.PluginExecutionContext.PrimaryEntityName,tracing,service, localContext.PluginExecutionContext.PrimaryEntityId.ToString());
            }

            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message.ToString());

            }

        }
        public void CreateTask(String primaryEntityName,ITracingService tracing,IOrganizationService service,String Accountid)
        {

            tracing.Trace("entered Create Task");
            Entity followup = new Entity("task");

            followup["subject"] = "Send e-mail to the new customer.";
            followup["description"] =
                "Follow up with the customer. Check if there are any new issues that need resolution.";
            followup["scheduledstart"] = DateTime.Now.AddDays(7);
            followup["scheduledend"] = DateTime.Now.AddDays(7);
            followup["category"] = primaryEntityName;

            // Refer to the account in the task activity.
            //  if (localContext.PluginExecutionContext.OutputParameters.Contains("id"))
            {
                Guid regardingobjectid = new Guid(Accountid);
                string regardingobjectidType = "account";

                followup["regardingobjectid"] =
                new EntityReference(regardingobjectidType, regardingobjectid);
            }

            // Create the task in Microsoft Dynamics CRM.
            tracing.Trace("FollowupPlugin: Creating the task activity.");
            service.Create(followup);

        }

    }


}
